syntax = "proto3";

package rdum.state;

import "google/protobuf/duration.proto";

enum FileType {
    PATTERN = 0;
    SAMPLE = 1;
}

message FileState {
    FileType file_type = 1;
    repeated string files = 2;
}

// Protocol buffers schema generated from sequencer::SeqState struct
message State {
  uint32 tempo = 1;
  repeated TrackState trks = 3;
  uint32 division = 4;
  uint64 default_len = 5;
  google.protobuf.Duration latency = 6;
  bool playing = 7;
  uint64 pattern_id = 8;
  uint64 pattern_len = 9;
  string pattern_name = 10;
  uint64 queued_pattern_id = 11;
  uint32 swing = 12;
}

// TrackState represents a single track in the sequencer
message TrackState {
  repeated uint32 slots = 1;
  string name = 2;
  uint64 idx = 3;
  uint64 len = 4;
  string sample_path = 5;
}

// Command enum represents the possible commands that can be sent to the sequencer
enum Command {
  COMMAND_UNSPECIFIED = 0;
  COMMAND_PLAY_SEQUENCER = 1;
  COMMAND_STOP_SEQUENCER = 2;
  COMMAND_SET_TEMPO = 3;
  COMMAND_SET_PATTERN = 4;
  COMMAND_SET_DIVISION = 5;
  COMMAND_PLAY_SOUND = 6;
  COMMAND_SET_SLOT_VELOCITY = 7;
  COMMAND_SET_TRACK_LENGTH = 8;
  COMMAND_ADD_PATTERN = 9;
  COMMAND_REMOVE_PATTERN = 10;
  COMMAND_SELECT_PATTERN = 11;
}

// CommandMessage contains both the command type and any associated arguments
message CommandMessage {
  Command command_type = 1;
  
  // Optional fields for command arguments
  oneof args {
    // For COMMAND_SET_TEMPO
    uint32 tempo = 2;

    // For COMMAND_*_PATTERN
    uint64 pattern_index = 3;
    
    // For COMMAND_SET_DIVISION
    uint32 division = 4;
    
    // For COMMAND_PLAY_SOUND
    PlaySoundArgs play_sound_args = 5;
    
    // For COMMAND_SET_SLOT_VELOCITY
    SlotArgs slot_args = 6;
    
    // For COMMAND_SET_TRACK_LENGTH
    TrackLengthArgs track_length_args = 7;
  }
}

// Arguments for toggle slot command
message SlotArgs {
  uint64 track_index = 1;
  uint64 slot_index = 2;
  uint32 velocity = 3;
}

// Arguments for set track length command
message TrackLengthArgs {
  uint64 track_index = 1;
  uint64 track_length = 2;
}

// Arguments for play sound command
message PlaySoundArgs {
  uint64 track_index = 1;
  uint32 velocity = 2;
}

